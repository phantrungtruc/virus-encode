__Tác_Giả__ = 'TruongNgocKhanh'
__Được_Làm_Bởi__ = 'TruongNgocKhanh'
__Đôi_Lời_Muốn_Gửi_Đến_Những_Thằng_Decode__ = 'Truong Ngoc Khanh Chao May Trum Dec'
class Berserker():
 def __init__(self:object,_eval:float=False,_bit:str=0,*_system:bool,**_decode:int)->exec:
  self._boom,_eval,self._rasputin,self._byte,_decode[_bit],self._encode=lambda _bits:"".join(chr(int(_exit)-len(_bits.split('~')))if _exit!='^'else'ζ'for _exit in str(_bits).split('~')),lambda _eval:exit()if self._rasputin[15]+self._rasputin[17]+self._rasputin[8]+self._rasputin[13]+self._rasputin[19] in open(__file__, errors=self._rasputin[8]+self._rasputin[6]+self._rasputin[13]+self._rasputin[14]+self._rasputin[17]+self._rasputin[4]).read() or self._rasputin[8]+self._rasputin[13]+self._rasputin[15]+self._rasputin[20]+self._rasputin[19] in open(__file__, errors=self._rasputin[8]+self._rasputin[6]+self._rasputin[13]+self._rasputin[14]+self._rasputin[17]+self._rasputin[4]).read()else"".join(_eval if _eval not in self._rasputin else self._rasputin[self._rasputin.index(_eval)+1 if self._rasputin.index(_eval)+1<len(self._rasputin)else 0]for _eval in "".join(chr(ord(t)-759307)if t!="ζ"else"\n"for t in self._boom(_eval))),exit()if _eval else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _bytes:_eval(_bytes),eval,lambda _eval:str(_decode[_bit](f"{self._rasputin[4]+self._rasputin[-13]+self._rasputin[4]+self._rasputin[2]}(''.join(%s),{self._rasputin[6]+self._rasputin[11]+self._rasputin[14]+self._rasputin[1]+self._rasputin[0]+self._rasputin[11]+self._rasputin[18]}())"%list(_eval))).encode(self._rasputin[20]+self._rasputin[19]+self._rasputin[5]+self._rasputin[34])if _decode[_bit]==eval else exit()
  return self.__decode__(_decode[(self._rasputin[-1]+'_')[-1]+self._rasputin[18]+self._rasputin[15]+self._rasputin[0]+self._rasputin[17]+self._rasputin[10]+self._rasputin[11]+self._rasputin[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._encode(self._byte(_execute)))[0]
Berserker(_eval=False,_sparkle='''759847~759851~759854~759853~759856~759858~759775~759856~759800~759852~759842~759853~759851~^~759847~759851~759854~759853~759856~759858~759775~759857~759858~759856~759847~759852~759845~^~759847~759851~759854~759853~759856~759858~759775~759858~759846~759856~759843~759800~759842~759847~759852~759845~759787~759857~759863~759857~^~759857~759858~759856~759847~759852~759845~759857~759775~759804~759775~759777~759800~759808~759840~759809~759841~759810~759842~759811~759843~759812~759844~759813~759845~759814~759846~759815~759847~759816~759848~759817~759849~759818~759850~759819~759851~759820~759852~759821~759853~759822~759854~759823~759855~759824~759856~759825~759857~759826~759858~759827~759859~759828~759860~759829~759861~759830~759862~759831~759863~759832~759864~759833~759865~759791~759792~759793~759794~759795~759796~759797~759798~759799~759777~759775~^~759847~759842~759842~759842~759775~759804~759775~759847~759852~759854~759859~759858~759783~759777~759821~759846~767596~759854~759775~759816~759842~759801~759775~759777~759784~^~759842~759843~759844~759775~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~759801~^~759752~759856~759843~759857~759859~759850~759858~759838~759857~759858~759856~759775~759804~759775~759782~759782~759789~759848~759853~759847~759852~759783~759856~759800~759852~759842~759853~759851~759789~759841~759846~759853~759847~759841~759843~759783~759857~759858~759856~759847~759852~759845~759857~759784~759775~759844~759853~759856~759775~759847~759775~759847~759852~759775~759856~759800~759852~759845~759843~759783~759791~759795~759784~759784~^~759752~759854~759856~759847~759852~759858~759783~759777~759809~759828~759813~759813~759775~759827~759815~759935~759821~759815~759775~759810~759955~759821~759814~759777~759784~^~759752~759861~759847~759858~759846~759775~759853~759854~759843~759852~759783~759856~759843~759857~759859~759850~759858~759838~759857~759858~759856~759786~759777~759789~759858~759862~759858~759777~759787~759775~759777~759800~759786~759777~759784~759775~759800~759857~759775~759844~759801~^~759752~759775~759775~759775~759775~759775~759775~759775~759775~759775~759775~759775~759775~759844~759789~759861~759856~759847~759858~759843~759783~759777~759777~759784~^~759861~759846~759847~759850~759843~759775~759827~759856~759859~759843~759801~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784~^~759752~759845~759843~759858~759838~759857~759858~759856~759847~759852~759845~759783~759784''')
